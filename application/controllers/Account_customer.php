<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Account_customer extends Admin_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Account_customer_model');
         /* Title Page :: Common */
         $this->page_title->push('Customers');
         $this->data['pagetitle'] = $this->page_title->show();
 
         /* Breadcrumbs :: Common */
         $this->breadcrumbs->unshift(1, 'Customers', 'Account_customer');
    } 

    /*
     * Listing of Account_customer
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('Account_customer/index?');
        $config['total_rows'] = $this->Account_customer_model->get_all_Account_customer_count();
        $this->pagination->initialize($config);
        /* Breadcrumbs */
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->data['Account_customer'] = $this->Account_customer_model->get_all_Account_customer($params);
        
        $this->template->public_render('Account_customer/index', $this->data);

   
    }

    /*
     * Adding a new Account_customer
     */
    function add()
    {   
        $this->breadcrumbs->unshift(2, 'Add', 'add');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->load->library('form_validation');
        $this->data['Tax'] = $this->Account_customer_model->get_tax();
        $this->form_validation->set_rules('name','Name','required|max_length[255]');
        $this->form_validation->set_rules('email','email','required|max_length[255]');
        $this->form_validation->set_rules('phone','phone','required|max_length[11]');
        $this->form_validation->set_rules('address','address','required|max_length[11]');
		if($this->form_validation->run())     
        {   
            $params = array(
                'name' => $this->input->post('name'),
                'email' => $this->input->post('email'),
                'phone' => $this->input->post('phone'),
                'address' => $this->input->post('address'),
                'tax_number'=>$this->input->post('tax'),
            );
            
            $Account_customer_id = $this->Account_customer_model->add_Account_customer($params);
            redirect('Account_customer/index');
        }
        else
        {      
            $this->template->public_render('Account_customer/add', $this->data);      
           
        }
    }  

    /*
     * Editing a Account_customer
     */
    function edit($id)
    {   
        $this->breadcrumbs->unshift(2, 'Edit', 'edit');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        // check if the Account_customer exists before trying to edit it
        $this->data['Account_customer'] = $this->Account_customer_model->get_Account_customer($id);
        $this->data['Account_customer']['tax'] = $this->Account_customer_model->get_in_tax($this->data['Account_customer']['tax_number']);
        $this->data['Tax']=$this->Account_customer_model->get_tax();
        if(isset($this->data['Account_customer']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('name','Name','required|max_length[255]');
            $this->form_validation->set_rules('email','email','required|max_length[255]');
        $this->form_validation->set_rules('phone','phone','required|max_length[11]');
        $this->form_validation->set_rules('address','address','required|max_length[11]');         
			if($this->form_validation->run())     
            {   
                $params = array(
                    'name' => $this->input->post('name'),
                    'email' => $this->input->post('email'),
                    'phone' => $this->input->post('phone'),
                    'address' => $this->input->post('address'),
                    'tax_number' => $this->input->post('tax'),
                    'enabled' => $this->input->post('enabled'),
                    'updated_at' => date("Y-m-d H:i:s"),
                );

                $this->Account_customer_model->update_Account_customer($id,$params);            
                redirect('Account_customer/index');
            }
            else
            {
                $this->template->public_render('Account_customer/edit', $this->data); 
            }
        }
        else
            show_error('The Account_customer you are trying to edit does not exist.');
    } 

    /*
     * Deleting Account_customer
     */
    function remove($id)
    {
        $Account_customer = $this->Account_customer_model->get_Account_customer($id);

        // check if the Account_customer exists before trying to delete it
        if(isset($Account_customer['id']))
        {
            
            $this->Account_customer_model->delete_Account_customer($id,$params);
            redirect('Account_customer/index');
        }
        else
            show_error('The Account_customer you are trying to delete does not exist.');
    }
    
}
