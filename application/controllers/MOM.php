<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class MOM extends User_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('MOM_model');
        $this->load->model('Project_model');
        $this->load->model('Employees_model');
        /* Title Page :: Common */
        $this->page_title->push('Mins Of Meeting');
        $this->data['pagetitle'] = $this->page_title->show();

        /* Breadcrumbs :: Common */
        $this->breadcrumbs->unshift(1, 'MOM', 'leave');
    } 

    function index()
    {
        
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('MOM/index?');
        $config['total_rows'] = $this->MOM_model->get_all_mom_count();
        $this->pagination->initialize($config);
        /* Breadcrumbs */
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->data['moms'] = $this->MOM_model->get_all_mom($params);
        
        $this->template->public_render('MOM/index', $this->data);

   
    }

    function dynamic_points_field()
    { 
        $employees = $this->Employees_model->get_all_employee_order_dep();?> 
        <div class="form-group col-md-4">  							                     
            <textarea class="form-control" placeholder=""name="points[]" required rows=3></textarea>	
        </div>
        <div class="form-group col-md-4">
            <textarea class="form-control" placeholder=""name="recommenation[]" required rows=3></textarea>	
            
        </div>
        <div class="form-group col-md-3">
        <select class="form-control  mb-2" name="assigned_to[]">
            <option value="">Select</option>
            <?php 
                $dep = "";
                foreach($employees as $employee){
                    if($dep!=$employee['department'])
                    {?>
                        <optgroup label="<?php echo $employee['department'];?>">
                        <?php	
                        $dep = $employee['department'];									
                    }
                    ?>
                    <option value="<?php echo $employee['id'];?>"><?php echo ucwords($employee['empName']);?></option>
                    
                    <?php
                    if($dep!=$employee['department'])
                    { ?></optgroup><?php  }
                }?>
            </select>                           
            <input type="text" class="form-control flatpickr-date" placeholder="Due date" name="due_date[]" value="" required>
        </div>
        <div class="form-group col-md-1">                           
            <a  href="javascript:void(0);"  class="btn btn-danger btn-xs" title="Add another point"><span class="ion ion-md-close-circle"></span></a>
        </div>
        <?php exit;
    }

    /*
     * Adding a new mom
     */
    function add()
    {           
        $this->load->library('form_validation');
        $this->form_validation->set_rules('meeting_id','MOM Id','required');
        $this->form_validation->set_rules('project_id','Date','required');
        $this->form_validation->set_rules('meeting_date','Title','required');
        $this->form_validation->set_rules('start_time','Type','required');
		if($this->form_validation->run())     
        {   
            $params = array(
                'meeting_id' => $this->input->post('meeting_id'),
                'project_id' => $this->input->post('project_id'),
                'meeting_date' => $this->input->post('meeting_date'),
                'start_time' => $this->input->post('start_time'),
                'end_time' => $this->input->post('end_time'),
                'location' => $this->input->post('location'),
                'title' => $this->input->post('title'),
            );
            
            $mom_id = $this->MOM_model->add_mom($params);
            foreach($this->input->post('employees') as $key=>$fname) 
            {  
                if($this->input->post('employees')[$key]!="")
                {
                    $employees[] = array(
                        'mom_id' => $mom_id,
                        'employee_id' => $this->input->post('employees')[$key],
                    );
                }                
            }
            if(isset($employees))
            {
                $this->MOM_model->add_employees($employees);
            }

            //discussed points
            foreach($this->input->post('points') as $key=>$fname) 
            {  
                if($this->input->post('points')[$key]!="")
                {
                    $points[] = array(
                        'mom_id' => $mom_id,
                        'points' => $this->input->post('points')[$key],
                        'recommenation' => $this->input->post('recommenation')[$key],
                        'assigned_to' => $this->input->post('assigned_to')[$key],
                        'due_date' => $this->input->post('due_date')[$key],
                    );
                }                
            }
            if(isset($points))
            {
                $this->MOM_model->add_points($points);
            }
            redirect('MOM/index');
        }
        else
        {      
            $this->breadcrumbs->unshift(2, 'Add', 'add');
            $this->data['breadcrumb'] = $this->breadcrumbs->show();
            $this->data['mom_id']="";
            $this->data['projects'] = $this->Project_model->get_all_projects();
            $this->data['employees'] = $this->Employees_model->get_all_employee_order_dep();
            $this->template->public_render('MOM/add', $this->data);      
           
        }
    }  

    /*
     * Editing a mom
     */
    function edit($id)
    {   
        $this->breadcrumbs->unshift(2, 'Edit', 'edit');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        // check if the mom exists before trying to edit it
        $this->data['mom'] = $this->MOM_model->get_mom($id);
        
        if(isset($this->data['mom']['id']))
        {
            $this->load->library('form_validation');
            $this->form_validation->set_rules('mom_id','MOM Id','required');
            $this->form_validation->set_rules('mom_date','Date','required');
            $this->form_validation->set_rules('mom_name','Title','required');
            $this->form_validation->set_rules('mom_type','Type','required');
			if($this->form_validation->run())     
            {   
                $params = array(
                    'mom_id' => $this->input->post('mom_id'),
                    'mom_date' => $this->input->post('mom_date'),
                    'mom_name' => $this->input->post('mom_name'),
                    'mom_type' => $this->input->post('mom_type'),
                    'project_id' => $this->input->post('project_id'),
                    'description' => $this->input->post('description'),
                );

                $this->MOM_model->update_mom($id,$params);            
                redirect('MOM/index');
            }
            else
            {
                $this->data['projects'] = $this->Project_model->get_all_projects();
                $this->data['employees'] = $this->Employees_model->get_all_employee_order_dep();
                $this->data['mom_employees'] = $this->MOM_model->get_all_mom_employees($id);
                $this->template->public_render('MOM/edit', $this->data); 
            }
        }
        else
            show_error('The mom you are trying to edit does not exist.');
    } 

    /*
     * Deleting mom
     */
    function remove($id)
    {
        $mom = $this->MOM_model->get_mom($id);

        // check if the mom exists before trying to delete it
        if(isset($mom['id']))
        {
            $this->MOM_model->delete_mom($id);
            redirect('MOM/index');
        }
        else
            show_error('The mom you are trying to delete does not exist.');
    }
}
