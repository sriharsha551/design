<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Memo extends Admin_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Memo_model');
        $this->load->model('Project_model');
        $this->load->model('Employees_model');
         /* Title Page :: Common */
         $this->page_title->push('Memo');
         $this->data['pagetitle'] = $this->page_title->show();
 
         /* Breadcrumbs :: Common */
         $this->breadcrumbs->unshift(1, 'Memo', 'Memo');
    } 

    /*
     * Listing of memo
     */
    function index()
    {
        
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('Memo/index?');
        $config['total_rows'] = $this->Memo_model->get_all_memo_count();
        $this->pagination->initialize($config);
        /* Breadcrumbs */
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->data['memos'] = $this->Memo_model->get_all_memo($params);
        
        $this->template->public_render('Memo/index', $this->data);

   
    }

    /*
     * Adding a new memo
     */
    function add()
    {           
        $this->load->library('form_validation');
        $this->form_validation->set_rules('memo_id','Memo Id','required');
        $this->form_validation->set_rules('memo_date','Date','required');
        $this->form_validation->set_rules('memo_name','Title','required');
        $this->form_validation->set_rules('memo_type','Type','required');
		if($this->form_validation->run())     
        {   
            $params = array(
                'memo_id' => $this->input->post('memo_id'),
                'memo_date' => $this->input->post('memo_date'),
                'memo_name' => $this->input->post('memo_name'),
                'memo_type' => $this->input->post('memo_type'),
                'project_id' => $this->input->post('project_id'),
                'description' => $this->input->post('description'),
            );
            
            $memo_id = $this->Memo_model->add_memo($params);
            foreach($this->input->post('employees') as $key=>$fname) 
            {  
                if($this->input->post('employees')[$key]!="")
                {
                    $employees[] = array(
                        'memo_id' => $memo_id,
                        'employee_id' => $this->input->post('employees')[$key],
                    );
                }         
                

                //create notification

            }
            if(isset($employees))
            {
                $this->Memo_model->add_employees($employees);
            }
            redirect('Memo/index');
        }
        else
        {      
            $this->breadcrumbs->unshift(2, 'Add', 'add');
            $this->data['breadcrumb'] = $this->breadcrumbs->show();
            $this->data['memo_id']="";
            $this->data['projects'] = $this->Project_model->get_all_projects();
            $this->data['employees'] = $this->Employees_model->get_all_employee_order_dep();
            $this->template->public_render('Memo/add', $this->data);      
           
        }
    }  

    /*
     * Editing a memo
     */
    function edit($id)
    {   
        $this->breadcrumbs->unshift(2, 'Edit', 'edit');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        // check if the memo exists before trying to edit it
        $this->data['memo'] = $this->Memo_model->get_memo($id);
        
        if(isset($this->data['memo']['id']))
        {
            $this->load->library('form_validation');
            $this->form_validation->set_rules('memo_id','Memo Id','required');
            $this->form_validation->set_rules('memo_date','Date','required');
            $this->form_validation->set_rules('memo_name','Title','required');
            $this->form_validation->set_rules('memo_type','Type','required');
			if($this->form_validation->run())     
            {   
                $params = array(
                    'memo_id' => $this->input->post('memo_id'),
                    'memo_date' => $this->input->post('memo_date'),
                    'memo_name' => $this->input->post('memo_name'),
                    'memo_type' => $this->input->post('memo_type'),
                    'project_id' => $this->input->post('project_id'),
                    'description' => $this->input->post('description'),
                );

                $this->Memo_model->update_memo($id,$params);            
                redirect('Memo/index');
            }
            else
            {
                $this->data['projects'] = $this->Project_model->get_all_projects();
                $this->data['employees'] = $this->Employees_model->get_all_employee_order_dep();
                $emps = $this->Memo_model->get_all_memo_employees($id);
               // print_r($emps); exit;
                $array_emps = array();
                foreach($emps as $emp)
                {
                    array_push($array_emps,$emp['employee_id']);
                }
                //print_r($array_emps); exit;
                $this->data['memo_employees'] = $array_emps ;
                $this->template->public_render('Memo/edit', $this->data); 
            }
        }
        else
            show_error('The memo you are trying to edit does not exist.');
    } 

    /*
     * Deleting memo
     */
    function remove($id)
    {
        $memo = $this->Memo_model->get_memo($id);

        // check if the memo exists before trying to delete it
        if(isset($memo['id']))
        {
            $this->Memo_model->delete_memo($id);
            redirect('Memo/index');
        }
        else
            show_error('The memo you are trying to delete does not exist.');
    }
    
}
