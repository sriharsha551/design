<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */ 
class MaterialItems extends Admin_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('MaterialItems_model');
         /* Title Page :: Common */
         $this->page_title->push('MaterialItems');
         $this->data['pagetitle'] = $this->page_title->show();
 
         /* Breadcrumbs :: Common */
         $this->breadcrumbs->unshift(1, 'MaterialItems', 'MaterialItems');
    } 

    /*
     * Listing of MaterialItems
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('MaterialItems/index?');
        $config['total_rows'] = $this->MaterialItems_model->get_all_MaterialItems_count();
        $this->pagination->initialize($config);
        /* Breadcrumbs */
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->data['MaterialItems'] = $this->MaterialItems_model->get_all_MaterialItems($params);
        $query = $this->MaterialItems_model->select(); 
         $this->data['MATERIALS'] = null;
         if($query){
          $this->data['MATERIALS'] =  $query;
         }
        
        $this->template->public_render('MaterialItems/index', $this->data);

   
    }

    /*
     * Adding a new MaterialItems
     */
    function add()
    {   
        $this->breadcrumbs->unshift(2, 'Add', 'add');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->load->library('form_validation');
        $this->form_validation->set_rules('remarks','remarks','required|max_length[255]');

        $query = $this->MaterialItems_model->select(); 
         $this->data['MATERIALS'] = null;
         if($query){
          $this->data['MATERIALS'] =  $query;
         }
         $query1 = $this->MaterialItems_model->selectSupplier(); 
         $this->data['SUPPLIER'] = null;
         if($query1){
          $this->data['SUPPLIER'] =  $query1;
         } 
		if($this->form_validation->run())     
        {   
            for($i=0;$i<$this->input->post('count');$i++){
            $params = array(
            'material_cat_id' => $this->input->post('category_id'),  
            'material_name'  => $this->input->post('name'),  
            'price'   => $this->input->post('price['.$i.']'), 
            'dimensions'   => $this->input->post('dimensions'),  
            'supplier_id'   =>$this->input->post('supplier['.$i.']'),
            'qty'   => $this->input->post('qty'),
				'remarks' => $this->input->post('remarks'),
            );
            
            $MaterialItems_id = $this->MaterialItems_model->add_MaterialItems($params);
        }
            redirect('MaterialItems/index');
        }
        else
        {   
            $this->template->public_render('MaterialItems/add', $this->data);      
           
        }
    }  

    /*
     * Editing a MaterialItems
     */
    function edit($id)
    {   
        $this->breadcrumbs->unshift(2, 'Edit', 'edit');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        // check if the MaterialItems exists before trying to edit it
        $this->data['MaterialItems'] = $this->MaterialItems_model->get_MaterialItems($id);
        $this->data['MaterialItems']['category'] = $this->MaterialItems_model->get_name($this->data['MaterialItems']['material_cat_id']);
        $this->data['MaterialItems']['supplier'] = $this->MaterialItems_model->get_supplier_name($this->data['MaterialItems']['supplier_id']);
        $query = $this->MaterialItems_model->select(); 
         $this->data['MATERIALS'] = null;
         if($query){
          $this->data['MATERIALS'] =  $query;
         }
         $query1 = $this->MaterialItems_model->selectSupplier(); 
         $this->data['SUPPLIER'] = null;
         if($query1){
          $this->data['SUPPLIER'] =  $query1;
         }
        if(isset($this->data['MaterialItems']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('remarks','remarks','required|max_length[255]');
		
			if($this->form_validation->run())     
            {   
                $params = array(
            'material_cat_id' => $this->input->post('material_cat_id'),  
            'material_name'  => $this->input->post('name'),  
            'price'   => $this->input->post('price'), 
            'dimensions'   => $this->input->post('dimensions'),  
            'supplier_id'   =>$this->input->post('supplier'),
            'qty'   => $this->input->post('qty'),
				'remarks' => $this->input->post('remarks'),
                );
                // print_r($params);
                $this->MaterialItems_model->update_MaterialItems($id,$params);            
                redirect('MaterialItems/index');
            }
            else
            {
                
                $this->template->public_render('MaterialItems/edit', $this->data); 
            }
        }
        else
            show_error('The MaterialItems you are trying to edit does not exist.');
    } 

    /*
     * Deleting MaterialItems
     */
    function remove($id)
    {
        $MaterialItems = $this->MaterialItems_model->get_MaterialItems($id);

        // check if the MaterialItems exists before trying to delete it
        if(isset($MaterialItems['id']))
        {
            $this->MaterialItems_model->delete_MaterialItems($id);
            redirect('MaterialItems/index');
        }
        else
            show_error('The MaterialItems you are trying to delete does not exist.');
    }
    
}
