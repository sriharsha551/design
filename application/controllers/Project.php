<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Project extends User_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Project_model');
        /* Title Page :: Common */
        $this->page_title->push('Projects');
        $this->data['pagetitle'] = $this->page_title->show();

        /* Breadcrumbs :: Common */
        $this->breadcrumbs->unshift(1, 'Project', 'Project');
    } 

    /*
     * Listing of projects
     */
    function index()
    {
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->data['projects'] = $this->Project_model->get_all_projects();
        $this->template->public_render('Project/index', $this->data);
    }

    /*
     * Adding a new project
     */
    function add()
    {   
        $this->breadcrumbs->unshift(2, 'Create', 'Project/add');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->load->library('form_validation');

		$this->form_validation->set_rules('project','Project','required|max_length[255]');
		$this->form_validation->set_rules('client','Client','required|max_length[255]');
		$this->form_validation->set_rules('place','Place','required|max_length[255]');
		$this->form_validation->set_rules('enquiry_no','Enquiry No','required|max_length[100]');
		$this->form_validation->set_rules('project_no','Project No','required|max_length[100]');
		$this->form_validation->set_rules('mobile1','Mobile1','required|max_length[20]');
		$this->form_validation->set_rules('mobile2','Mobile2','max_length[20]');
		$this->form_validation->set_rules('project_date','Project Date','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'status' => $this->input->post('status'),
				'project' => $this->input->post('project'),
				'client' => $this->input->post('client'),
				'place' => $this->input->post('place'),
				'enquiry_no' => $this->input->post('enquiry_no'),
				'project_no' => $this->input->post('project_no'),
				'mobile1' => $this->input->post('mobile1'),
				'mobile2' => $this->input->post('mobile2'),
				'project_date' => date("Y-m-d",strtotime($this->input->post('project_date'))),
				'discription' => $this->input->post('discription'),
                'address' => $this->input->post('address'),
                
            );
            
            $project_id = $this->Project_model->add_project($params);
            redirect('project/index');
        }
        else
        {            
            $this->template->public_render('Project/add', $this->data);
        }
    }  

    /*
     * Editing a project
     */
    function edit($id)
    {   
        $this->breadcrumbs->unshift(2, 'Edit', 'Project/edit');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        // check if the project exists before trying to edit it
        $this->data['project'] = $this->Project_model->get_project($id);
        
        if(isset($this->data['project']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('project','Project','required|max_length[255]');
			$this->form_validation->set_rules('client','Client','required|max_length[255]');
			$this->form_validation->set_rules('place','Place','required|max_length[255]');
			$this->form_validation->set_rules('enquiry_no','Enquiry No','required|max_length[100]');
			$this->form_validation->set_rules('project_no','Project No','required|max_length[100]');
			$this->form_validation->set_rules('mobile1','Mobile1','required|max_length[20]');
			$this->form_validation->set_rules('mobile2','Mobile2','max_length[20]');
			$this->form_validation->set_rules('project_date','Project Date','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'status' => $this->input->post('status'),
					'project' => $this->input->post('project'),
					'client' => $this->input->post('client'),
					'place' => $this->input->post('place'),
					'enquiry_no' => $this->input->post('enquiry_no'),
					'project_no' => $this->input->post('project_no'),
					'mobile1' => $this->input->post('mobile1'),
					'mobile2' => $this->input->post('mobile2'),
					'project_date' => date("Y-m-d",strtotime($this->input->post('project_date'))),
					'discription' => $this->input->post('discription'),
					'address' => $this->input->post('address'),
                );

                $this->Project_model->update_project($id,$params);            
                redirect('project/index');
            }
            else
            {
                $this->template->public_render('Project/edit', $this->data);
            }
        }
        else
            show_error('The project you are trying to edit does not exist.');
    } 

    function view($id)
    {
        $this->breadcrumbs->unshift(2, 'View', 'Project/view');
        $this->data['breadcrumb'] = $this->breadcrumbs->show();
        $this->data['project'] = $this->Project_model->get_project($id);
        $this->template->public_render('Project/view', $this->data);
    }

    /*
     * Deleting project
     */
    function remove($id)
    {
        $project = $this->Project_model->get_project($id);

        // check if the project exists before trying to delete it
        if(isset($project['id']))
        {
            $this->Project_model->delete_project($id);
            redirect('project/index');
        }
        else
            show_error('The project you are trying to delete does not exist.');
    }
    
}